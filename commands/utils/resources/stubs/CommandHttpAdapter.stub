import { injectable, inject } from 'inversify';
import {{action}}{{grouping}}Command from "../../../../Application/Commands/Command/{{grouping}}/{{action}}{{grouping}}Command";
import IValidator from "../../Validations/Utils/IValidationService";
import { INTERFACES } from "../../../../Infrastructure/DI/interfaces.types";
import ValidationException from "../../../../Application/Exceptions/ValidationException";

@injectable()
class {{action}}{{grouping}}Adapter
{
    private validatorService: IValidator;

    public constructor(@inject(INTERFACES.IValidator) validatorService: IValidator)
    {
        this.validatorService = validatorService;
    }

    /**
     * Adapt a http request to an application's layer input
     * @return {{action}}{{grouping}}Command
     * @throws InvalidBodyException
     */
    public adapt(body: any): {{action}}{{grouping}}Command
    {
        const error = this.validatorService.validate(body, {});

        if (error){
            throw new ValidationException(JSON.stringify(this.validatorService.validationResult(error.details)));
        }

        return new {{action}}{{grouping}}Command();
    }
}

export default {{action}}{{grouping}}Adapter;